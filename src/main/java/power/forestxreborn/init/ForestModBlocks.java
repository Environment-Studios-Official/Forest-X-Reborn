
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package power.forestxreborn.init;

import power.forestxreborn.block.YellowStairsBlock;
import power.forestxreborn.block.YellowSlabBlock;
import power.forestxreborn.block.YellowPlanksBlock;
import power.forestxreborn.block.YellowFenceGateBlock;
import power.forestxreborn.block.YellowFenceBlock;
import power.forestxreborn.block.WildflowerBlock;
import power.forestxreborn.block.WhiteStairsBlock;
import power.forestxreborn.block.WhiteSlabBlock;
import power.forestxreborn.block.WhitePlanksBlock;
import power.forestxreborn.block.WhiteFenceGateBlock;
import power.forestxreborn.block.WhiteFenceBlock;
import power.forestxreborn.block.WarpedParquetBlock;
import power.forestxreborn.block.TruncatedPumiceWallBlock;
import power.forestxreborn.block.TruncatedPumiceStairsBlock;
import power.forestxreborn.block.TruncatedPumiceSlabBlock;
import power.forestxreborn.block.TruncatedPumiceBlock;
import power.forestxreborn.block.TruncatedCarvedPumiceBlock;
import power.forestxreborn.block.TropicalParquetBlock;
import power.forestxreborn.block.SunshroomBlock;
import power.forestxreborn.block.StrippedEucalyptusWoodBlock;
import power.forestxreborn.block.StrippedEucalyptusLogBlock;
import power.forestxreborn.block.SpruceParquetBlock;
import power.forestxreborn.block.SnailShellBlock;
import power.forestxreborn.block.SilverOreBlock;
import power.forestxreborn.block.SilverBlockBlock;
import power.forestxreborn.block.SapphireOreBlock;
import power.forestxreborn.block.SapphireBlockBlock;
import power.forestxreborn.block.SandslateFacetedBricksBlock;
import power.forestxreborn.block.SandslateBricksWallBlock;
import power.forestxreborn.block.SandslateBricksStairsBlock;
import power.forestxreborn.block.SandslateBricksSlabBlock;
import power.forestxreborn.block.SandslateBricksBlock;
import power.forestxreborn.block.SandslateBlock;
import power.forestxreborn.block.RhyoliteWallBlock;
import power.forestxreborn.block.RhyoliteStairsBlock;
import power.forestxreborn.block.RhyoliteSlabBlock;
import power.forestxreborn.block.RhyoliteBricksWallBlock;
import power.forestxreborn.block.RhyoliteBricksStairsBlock;
import power.forestxreborn.block.RhyoliteBricksSlabBlock;
import power.forestxreborn.block.RhyoliteBricksBlock;
import power.forestxreborn.block.RhyoliteBlock;
import power.forestxreborn.block.RedStairsBlock;
import power.forestxreborn.block.RedSlabBlock;
import power.forestxreborn.block.RedPlanksBlock;
import power.forestxreborn.block.RedFenceGateBlock;
import power.forestxreborn.block.RedFenceBlock;
import power.forestxreborn.block.RedCrushedSandstoneWallBlock;
import power.forestxreborn.block.RedCrushedSandstoneStairsBlock;
import power.forestxreborn.block.RedCrushedSandstoneSlabBlock;
import power.forestxreborn.block.RedCrushedSandstoneBlock;
import power.forestxreborn.block.RawSilverBlockBlock;
import power.forestxreborn.block.RawGingerbreadBlockBlock;
import power.forestxreborn.block.PurpleStairsBlock;
import power.forestxreborn.block.PurpleSlabBlock;
import power.forestxreborn.block.PurplePlanksBlock;
import power.forestxreborn.block.PurpleFenceGateBlock;
import power.forestxreborn.block.PurpleFenceBlock;
import power.forestxreborn.block.PumiceWallBlock;
import power.forestxreborn.block.PumiceStairsBlock;
import power.forestxreborn.block.PumiceSlabBlock;
import power.forestxreborn.block.PumiceBricksWallBlock;
import power.forestxreborn.block.PumiceBricksStairsBlock;
import power.forestxreborn.block.PumiceBricksSlabBlock;
import power.forestxreborn.block.PumiceBricksBlock;
import power.forestxreborn.block.PumiceBlock;
import power.forestxreborn.block.PolishedSandslateWallBlock;
import power.forestxreborn.block.PolishedSandslateStairsBlock;
import power.forestxreborn.block.PolishedSandslateSlabBlock;
import power.forestxreborn.block.PolishedSandslateBlock;
import power.forestxreborn.block.PolishedRhyoliteWallBlock;
import power.forestxreborn.block.PolishedRhyoliteStairsBlock;
import power.forestxreborn.block.PolishedRhyoliteSlabBlock;
import power.forestxreborn.block.PolishedRhyoliteBlock;
import power.forestxreborn.block.PolishedPumiceWallBlock;
import power.forestxreborn.block.PolishedPumiceStairsBlock;
import power.forestxreborn.block.PolishedPumiceSlabBlock;
import power.forestxreborn.block.PolishedPumiceBlock;
import power.forestxreborn.block.PolishedMarbleWallBlock;
import power.forestxreborn.block.PolishedMarbleStairsBlock;
import power.forestxreborn.block.PolishedMarbleSlabBlock;
import power.forestxreborn.block.PolishedMarbleBlock;
import power.forestxreborn.block.PinkStairsBlock;
import power.forestxreborn.block.PinkSlabBlock;
import power.forestxreborn.block.PinkPlanksBlock;
import power.forestxreborn.block.PinkFenceGateBlock;
import power.forestxreborn.block.PinkFenceBlock;
import power.forestxreborn.block.PeatBlock;
import power.forestxreborn.block.OrangeStairsBlock;
import power.forestxreborn.block.OrangeSlabBlock;
import power.forestxreborn.block.OrangePlanksBlock;
import power.forestxreborn.block.OrangeFenceGateBlock;
import power.forestxreborn.block.OrangeFenceBlock;
import power.forestxreborn.block.OakParquetBlock;
import power.forestxreborn.block.MoonshroomBlock;
import power.forestxreborn.block.MarbleBricksWallBlock;
import power.forestxreborn.block.MarbleBricksStairsBlock;
import power.forestxreborn.block.MarbleBricksSlabBlock;
import power.forestxreborn.block.MarbleBricksBlock;
import power.forestxreborn.block.MarbleBlock;
import power.forestxreborn.block.MangroveParquetBlock;
import power.forestxreborn.block.MagentaStairsBlock;
import power.forestxreborn.block.MagentaSlabBlock;
import power.forestxreborn.block.MagentaPlanksBlock;
import power.forestxreborn.block.MagentaFenceGateBlock;
import power.forestxreborn.block.MagentaFenceBlock;
import power.forestxreborn.block.LimeStairsBlock;
import power.forestxreborn.block.LimeSlabBlock;
import power.forestxreborn.block.LimePlanksBlock;
import power.forestxreborn.block.LimeFenceGateBlock;
import power.forestxreborn.block.LimeFenceBlock;
import power.forestxreborn.block.LightGrayStairsBlock;
import power.forestxreborn.block.LightGraySlabBlock;
import power.forestxreborn.block.LightGrayPlanksBlock;
import power.forestxreborn.block.LightGrayFenceGateBlock;
import power.forestxreborn.block.LightGrayFenceBlock;
import power.forestxreborn.block.LightBlueStairsBlock;
import power.forestxreborn.block.LightBlueSlabBlock;
import power.forestxreborn.block.LightBluePlanksBlock;
import power.forestxreborn.block.LightBlueFenceGateBlock;
import power.forestxreborn.block.LightBlueFenceBlock;
import power.forestxreborn.block.LettuceStage3Block;
import power.forestxreborn.block.LettuceStage2Block;
import power.forestxreborn.block.LettuceStage1Block;
import power.forestxreborn.block.LettuceStage0Block;
import power.forestxreborn.block.LavanderBlock;
import power.forestxreborn.block.GreenStairsBlock;
import power.forestxreborn.block.GreenSlabBlock;
import power.forestxreborn.block.GreenPlanksBlock;
import power.forestxreborn.block.GreenFenceGateBlock;
import power.forestxreborn.block.GreenFenceBlock;
import power.forestxreborn.block.GrayStairsBlock;
import power.forestxreborn.block.GraySlabBlock;
import power.forestxreborn.block.GrayPlanksBlock;
import power.forestxreborn.block.GrayFenceGateBlock;
import power.forestxreborn.block.GrayFenceBlock;
import power.forestxreborn.block.GrapeVine1Block;
import power.forestxreborn.block.GrapeVine0Block;
import power.forestxreborn.block.GingerbreadBricksBlock;
import power.forestxreborn.block.GingerbreadBlockBlock;
import power.forestxreborn.block.EucalyptusWoodBlock;
import power.forestxreborn.block.EucalyptusTrapdoorBlock;
import power.forestxreborn.block.EucalyptusStairsBlock;
import power.forestxreborn.block.EucalyptusSlabBlock;
import power.forestxreborn.block.EucalyptusSaplingBlock;
import power.forestxreborn.block.EucalyptusPressurePlateBlock;
import power.forestxreborn.block.EucalyptusPlanksBlock;
import power.forestxreborn.block.EucalyptusParquetBlock;
import power.forestxreborn.block.EucalyptusLogBlock;
import power.forestxreborn.block.EucalyptusLeavesBlock;
import power.forestxreborn.block.EucalyptusFenceGateBlock;
import power.forestxreborn.block.EucalyptusFenceBlock;
import power.forestxreborn.block.EucalyptusDoorBlock;
import power.forestxreborn.block.EucalyptusButtonBlock;
import power.forestxreborn.block.DesertRoseBlock;
import power.forestxreborn.block.DenseWebWithSpiderBlock;
import power.forestxreborn.block.DenseWebBlock;
import power.forestxreborn.block.DeepslateSilverOreBlock;
import power.forestxreborn.block.DeepslateSapphireOreBlock;
import power.forestxreborn.block.DarkOakParquetBlock;
import power.forestxreborn.block.CyanStairsBlock;
import power.forestxreborn.block.CyanSlabBlock;
import power.forestxreborn.block.CyanPlanksBlock;
import power.forestxreborn.block.CyanFenceGateBlock;
import power.forestxreborn.block.CyanFenceBlock;
import power.forestxreborn.block.CrushedSandstoneWallBlock;
import power.forestxreborn.block.CrushedSandstoneStairsBlock;
import power.forestxreborn.block.CrushedSandstoneSlabBlock;
import power.forestxreborn.block.CrushedSandstoneBlock;
import power.forestxreborn.block.CrimsonParquetBlock;
import power.forestxreborn.block.CobbledSandslateWallBlock;
import power.forestxreborn.block.CobbledSandslateStairsBlock;
import power.forestxreborn.block.CobbledSandslateSlabBlock;
import power.forestxreborn.block.CobbledSandslateBlock;
import power.forestxreborn.block.ClayOvenBlock;
import power.forestxreborn.block.ChiseledRhyoliteBlock;
import power.forestxreborn.block.CherryParquetBlock;
import power.forestxreborn.block.BurningblossomBlock;
import power.forestxreborn.block.BrownStairsBlock;
import power.forestxreborn.block.BrownSlabBlock;
import power.forestxreborn.block.BrownPlanksBlock;
import power.forestxreborn.block.BrownFenceGateBlock;
import power.forestxreborn.block.BrownFenceBlock;
import power.forestxreborn.block.BlueberryBush1Block;
import power.forestxreborn.block.BlueberryBush0Block;
import power.forestxreborn.block.BlueStairsBlock;
import power.forestxreborn.block.BlueSlabBlock;
import power.forestxreborn.block.BlueRoseBlock;
import power.forestxreborn.block.BluePlanksBlock;
import power.forestxreborn.block.BlueFenceGateBlock;
import power.forestxreborn.block.BlueFenceBlock;
import power.forestxreborn.block.BlackStairsBlock;
import power.forestxreborn.block.BlackSlabBlock;
import power.forestxreborn.block.BlackPlanksBlock;
import power.forestxreborn.block.BlackFenceGateBlock;
import power.forestxreborn.block.BlackFenceBlock;
import power.forestxreborn.block.BirchParquetBlock;
import power.forestxreborn.block.AshCoverBlock;
import power.forestxreborn.block.AshBlockBlock;
import power.forestxreborn.block.AcaciaParquetBlock;
import power.forestxreborn.ForestMod;

import net.minecraftforge.registries.RegistryObject;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.client.event.RegisterColorHandlersEvent;
import net.minecraftforge.api.distmarker.Dist;

import net.minecraft.world.level.block.Block;

public class ForestModBlocks {
	public static final DeferredRegister<Block> REGISTRY = DeferredRegister.create(ForgeRegistries.BLOCKS, ForestMod.MODID);
	public static final RegistryObject<Block> SNAIL_SHELL = REGISTRY.register("snail_shell", () -> new SnailShellBlock());
	public static final RegistryObject<Block> PEAT = REGISTRY.register("peat", () -> new PeatBlock());
	public static final RegistryObject<Block> CRUSHED_SANDSTONE = REGISTRY.register("crushed_sandstone", () -> new CrushedSandstoneBlock());
	public static final RegistryObject<Block> CRUSHED_SANDSTONE_STAIRS = REGISTRY.register("crushed_sandstone_stairs", () -> new CrushedSandstoneStairsBlock());
	public static final RegistryObject<Block> CRUSHED_SANDSTONE_SLAB = REGISTRY.register("crushed_sandstone_slab", () -> new CrushedSandstoneSlabBlock());
	public static final RegistryObject<Block> CRUSHED_SANDSTONE_WALL = REGISTRY.register("crushed_sandstone_wall", () -> new CrushedSandstoneWallBlock());
	public static final RegistryObject<Block> RED_CRUSHED_SANDSTONE = REGISTRY.register("red_crushed_sandstone", () -> new RedCrushedSandstoneBlock());
	public static final RegistryObject<Block> RED_CRUSHED_SANDSTONE_STAIRS = REGISTRY.register("red_crushed_sandstone_stairs", () -> new RedCrushedSandstoneStairsBlock());
	public static final RegistryObject<Block> RED_CRUSHED_SANDSTONE_SLAB = REGISTRY.register("red_crushed_sandstone_slab", () -> new RedCrushedSandstoneSlabBlock());
	public static final RegistryObject<Block> RED_CRUSHED_SANDSTONE_WALL = REGISTRY.register("red_crushed_sandstone_wall", () -> new RedCrushedSandstoneWallBlock());
	public static final RegistryObject<Block> OAK_PARQUET = REGISTRY.register("oak_parquet", () -> new OakParquetBlock());
	public static final RegistryObject<Block> BIRCH_PARQUET = REGISTRY.register("birch_parquet", () -> new BirchParquetBlock());
	public static final RegistryObject<Block> DARK_OAK_PARQUET = REGISTRY.register("dark_oak_parquet", () -> new DarkOakParquetBlock());
	public static final RegistryObject<Block> SPRUCE_PARQUET = REGISTRY.register("spruce_parquet", () -> new SpruceParquetBlock());
	public static final RegistryObject<Block> ACACIA_PARQUET = REGISTRY.register("acacia_parquet", () -> new AcaciaParquetBlock());
	public static final RegistryObject<Block> TROPICAL_PARQUET = REGISTRY.register("tropical_parquet", () -> new TropicalParquetBlock());
	public static final RegistryObject<Block> CRIMSON_PARQUET = REGISTRY.register("crimson_parquet", () -> new CrimsonParquetBlock());
	public static final RegistryObject<Block> WARPED_PARQUET = REGISTRY.register("warped_parquet", () -> new WarpedParquetBlock());
	public static final RegistryObject<Block> MANGROVE_PARQUET = REGISTRY.register("mangrove_parquet", () -> new MangroveParquetBlock());
	public static final RegistryObject<Block> CHERRY_PARQUET = REGISTRY.register("cherry_parquet", () -> new CherryParquetBlock());
	public static final RegistryObject<Block> MARBLE = REGISTRY.register("marble", () -> new MarbleBlock());
	public static final RegistryObject<Block> MARBLE_BRICKS = REGISTRY.register("marble_bricks", () -> new MarbleBricksBlock());
	public static final RegistryObject<Block> POLISHED_MARBLE = REGISTRY.register("polished_marble", () -> new PolishedMarbleBlock());
	public static final RegistryObject<Block> POLISHED_MARBLE_SLAB = REGISTRY.register("polished_marble_slab", () -> new PolishedMarbleSlabBlock());
	public static final RegistryObject<Block> MARBLE_BRICKS_SLAB = REGISTRY.register("marble_bricks_slab", () -> new MarbleBricksSlabBlock());
	public static final RegistryObject<Block> POLISHED_MARBLE_STAIRS = REGISTRY.register("polished_marble_stairs", () -> new PolishedMarbleStairsBlock());
	public static final RegistryObject<Block> MARBLE_BRICKS_STAIRS = REGISTRY.register("marble_bricks_stairs", () -> new MarbleBricksStairsBlock());
	public static final RegistryObject<Block> POLISHED_MARBLE_WALL = REGISTRY.register("polished_marble_wall", () -> new PolishedMarbleWallBlock());
	public static final RegistryObject<Block> MARBLE_BRICKS_WALL = REGISTRY.register("marble_bricks_wall", () -> new MarbleBricksWallBlock());
	public static final RegistryObject<Block> RHYOLITE = REGISTRY.register("rhyolite", () -> new RhyoliteBlock());
	public static final RegistryObject<Block> POLISHED_RHYOLITE = REGISTRY.register("polished_rhyolite", () -> new PolishedRhyoliteBlock());
	public static final RegistryObject<Block> RHYOLITE_BRICKS = REGISTRY.register("rhyolite_bricks", () -> new RhyoliteBricksBlock());
	public static final RegistryObject<Block> CHISELED_RHYOLITE = REGISTRY.register("chiseled_rhyolite", () -> new ChiseledRhyoliteBlock());
	public static final RegistryObject<Block> RHYOLITE_SLAB = REGISTRY.register("rhyolite_slab", () -> new RhyoliteSlabBlock());
	public static final RegistryObject<Block> POLISHED_RHYOLITE_SLAB = REGISTRY.register("polished_rhyolite_slab", () -> new PolishedRhyoliteSlabBlock());
	public static final RegistryObject<Block> RHYOLITE_BRICKS_SLAB = REGISTRY.register("rhyolite_bricks_slab", () -> new RhyoliteBricksSlabBlock());
	public static final RegistryObject<Block> RHYOLITE_STAIRS = REGISTRY.register("rhyolite_stairs", () -> new RhyoliteStairsBlock());
	public static final RegistryObject<Block> POLISHED_RHYOLITE_STAIRS = REGISTRY.register("polished_rhyolite_stairs", () -> new PolishedRhyoliteStairsBlock());
	public static final RegistryObject<Block> RHYOLITE_BRICKS_STAIRS = REGISTRY.register("rhyolite_bricks_stairs", () -> new RhyoliteBricksStairsBlock());
	public static final RegistryObject<Block> RHYOLITE_WALL = REGISTRY.register("rhyolite_wall", () -> new RhyoliteWallBlock());
	public static final RegistryObject<Block> POLISHED_RHYOLITE_WALL = REGISTRY.register("polished_rhyolite_wall", () -> new PolishedRhyoliteWallBlock());
	public static final RegistryObject<Block> RHYOLITE_BRICKS_WALL = REGISTRY.register("rhyolite_bricks_wall", () -> new RhyoliteBricksWallBlock());
	public static final RegistryObject<Block> ASH_COVER = REGISTRY.register("ash_cover", () -> new AshCoverBlock());
	public static final RegistryObject<Block> ASH_BLOCK = REGISTRY.register("ash_block", () -> new AshBlockBlock());
	public static final RegistryObject<Block> PUMICE = REGISTRY.register("pumice", () -> new PumiceBlock());
	public static final RegistryObject<Block> POLISHED_PUMICE = REGISTRY.register("polished_pumice", () -> new PolishedPumiceBlock());
	public static final RegistryObject<Block> PUMICE_BRICKS = REGISTRY.register("pumice_bricks", () -> new PumiceBricksBlock());
	public static final RegistryObject<Block> TRUNCATED_PUMICE = REGISTRY.register("truncated_pumice", () -> new TruncatedPumiceBlock());
	public static final RegistryObject<Block> TRUNCATED_CARVED_PUMICE = REGISTRY.register("truncated_carved_pumice", () -> new TruncatedCarvedPumiceBlock());
	public static final RegistryObject<Block> PUMICE_SLAB = REGISTRY.register("pumice_slab", () -> new PumiceSlabBlock());
	public static final RegistryObject<Block> POLISHED_PUMICE_SLAB = REGISTRY.register("polished_pumice_slab", () -> new PolishedPumiceSlabBlock());
	public static final RegistryObject<Block> PUMICE_BRICKS_SLAB = REGISTRY.register("pumice_bricks_slab", () -> new PumiceBricksSlabBlock());
	public static final RegistryObject<Block> TRUNCATED_PUMICE_SLAB = REGISTRY.register("truncated_pumice_slab", () -> new TruncatedPumiceSlabBlock());
	public static final RegistryObject<Block> PUMICE_STAIRS = REGISTRY.register("pumice_stairs", () -> new PumiceStairsBlock());
	public static final RegistryObject<Block> POLISHED_PUMICE_STAIRS = REGISTRY.register("polished_pumice_stairs", () -> new PolishedPumiceStairsBlock());
	public static final RegistryObject<Block> PUMICE_BRICKS_STAIRS = REGISTRY.register("pumice_bricks_stairs", () -> new PumiceBricksStairsBlock());
	public static final RegistryObject<Block> TRUNCATED_PUMICE_STAIRS = REGISTRY.register("truncated_pumice_stairs", () -> new TruncatedPumiceStairsBlock());
	public static final RegistryObject<Block> PUMICE_WALL = REGISTRY.register("pumice_wall", () -> new PumiceWallBlock());
	public static final RegistryObject<Block> POLISHED_PUMICE_WALL = REGISTRY.register("polished_pumice_wall", () -> new PolishedPumiceWallBlock());
	public static final RegistryObject<Block> PUMICE_BRICKS_WALL = REGISTRY.register("pumice_bricks_wall", () -> new PumiceBricksWallBlock());
	public static final RegistryObject<Block> TRUNCATED_PUMICE_WALL = REGISTRY.register("truncated_pumice_wall", () -> new TruncatedPumiceWallBlock());
	public static final RegistryObject<Block> SANDSLATE = REGISTRY.register("sandslate", () -> new SandslateBlock());
	public static final RegistryObject<Block> COBBLED_SANDSLATE = REGISTRY.register("cobbled_sandslate", () -> new CobbledSandslateBlock());
	public static final RegistryObject<Block> POLISHED_SANDSLATE = REGISTRY.register("polished_sandslate", () -> new PolishedSandslateBlock());
	public static final RegistryObject<Block> SANDSLATE_BRICKS = REGISTRY.register("sandslate_bricks", () -> new SandslateBricksBlock());
	public static final RegistryObject<Block> SANDSLATE_FACETED_BRICKS = REGISTRY.register("sandslate_faceted_bricks", () -> new SandslateFacetedBricksBlock());
	public static final RegistryObject<Block> COBBLED_SANDSLATE_SLAB = REGISTRY.register("cobbled_sandslate_slab", () -> new CobbledSandslateSlabBlock());
	public static final RegistryObject<Block> POLISHED_SANDSLATE_SLAB = REGISTRY.register("polished_sandslate_slab", () -> new PolishedSandslateSlabBlock());
	public static final RegistryObject<Block> SANDSLATE_BRICKS_SLAB = REGISTRY.register("sandslate_bricks_slab", () -> new SandslateBricksSlabBlock());
	public static final RegistryObject<Block> COBBLED_SANDSLATE_STAIRS = REGISTRY.register("cobbled_sandslate_stairs", () -> new CobbledSandslateStairsBlock());
	public static final RegistryObject<Block> POLISHED_SANDSLATE_STAIRS = REGISTRY.register("polished_sandslate_stairs", () -> new PolishedSandslateStairsBlock());
	public static final RegistryObject<Block> SANDSLATE_BRICKS_STAIRS = REGISTRY.register("sandslate_bricks_stairs", () -> new SandslateBricksStairsBlock());
	public static final RegistryObject<Block> COBBLED_SANDSLATE_WALL = REGISTRY.register("cobbled_sandslate_wall", () -> new CobbledSandslateWallBlock());
	public static final RegistryObject<Block> POLISHED_SANDSLATE_WALL = REGISTRY.register("polished_sandslate_wall", () -> new PolishedSandslateWallBlock());
	public static final RegistryObject<Block> SANDSLATE_BRICKS_WALL = REGISTRY.register("sandslate_bricks_wall", () -> new SandslateBricksWallBlock());
	public static final RegistryObject<Block> RAW_GINGERBREAD_BLOCK = REGISTRY.register("raw_gingerbread_block", () -> new RawGingerbreadBlockBlock());
	public static final RegistryObject<Block> GINGERBREAD_BLOCK = REGISTRY.register("gingerbread_block", () -> new GingerbreadBlockBlock());
	public static final RegistryObject<Block> GINGERBREAD_BRICKS = REGISTRY.register("gingerbread_bricks", () -> new GingerbreadBricksBlock());
	public static final RegistryObject<Block> WHITE_PLANKS = REGISTRY.register("white_planks", () -> new WhitePlanksBlock());
	public static final RegistryObject<Block> LIGHT_GRAY_PLANKS = REGISTRY.register("light_gray_planks", () -> new LightGrayPlanksBlock());
	public static final RegistryObject<Block> GRAY_PLANKS = REGISTRY.register("gray_planks", () -> new GrayPlanksBlock());
	public static final RegistryObject<Block> BLACK_PLANKS = REGISTRY.register("black_planks", () -> new BlackPlanksBlock());
	public static final RegistryObject<Block> BROWN_PLANKS = REGISTRY.register("brown_planks", () -> new BrownPlanksBlock());
	public static final RegistryObject<Block> RED_PLANKS = REGISTRY.register("red_planks", () -> new RedPlanksBlock());
	public static final RegistryObject<Block> ORANGE_PLANKS = REGISTRY.register("orange_planks", () -> new OrangePlanksBlock());
	public static final RegistryObject<Block> YELLOW_PLANKS = REGISTRY.register("yellow_planks", () -> new YellowPlanksBlock());
	public static final RegistryObject<Block> LIME_PLANKS = REGISTRY.register("lime_planks", () -> new LimePlanksBlock());
	public static final RegistryObject<Block> GREEN_PLANKS = REGISTRY.register("green_planks", () -> new GreenPlanksBlock());
	public static final RegistryObject<Block> CYAN_PLANKS = REGISTRY.register("cyan_planks", () -> new CyanPlanksBlock());
	public static final RegistryObject<Block> LIGHT_BLUE_PLANKS = REGISTRY.register("light_blue_planks", () -> new LightBluePlanksBlock());
	public static final RegistryObject<Block> BLUE_PLANKS = REGISTRY.register("blue_planks", () -> new BluePlanksBlock());
	public static final RegistryObject<Block> PURPLE_PLANKS = REGISTRY.register("purple_planks", () -> new PurplePlanksBlock());
	public static final RegistryObject<Block> MAGENTA_PLANKS = REGISTRY.register("magenta_planks", () -> new MagentaPlanksBlock());
	public static final RegistryObject<Block> PINK_PLANKS = REGISTRY.register("pink_planks", () -> new PinkPlanksBlock());
	public static final RegistryObject<Block> WHITE_STAIRS = REGISTRY.register("white_stairs", () -> new WhiteStairsBlock());
	public static final RegistryObject<Block> LIGHT_GRAY_STAIRS = REGISTRY.register("light_gray_stairs", () -> new LightGrayStairsBlock());
	public static final RegistryObject<Block> GRAY_STAIRS = REGISTRY.register("gray_stairs", () -> new GrayStairsBlock());
	public static final RegistryObject<Block> BLACK_STAIRS = REGISTRY.register("black_stairs", () -> new BlackStairsBlock());
	public static final RegistryObject<Block> BROWN_STAIRS = REGISTRY.register("brown_stairs", () -> new BrownStairsBlock());
	public static final RegistryObject<Block> RED_STAIRS = REGISTRY.register("red_stairs", () -> new RedStairsBlock());
	public static final RegistryObject<Block> ORANGE_STAIRS = REGISTRY.register("orange_stairs", () -> new OrangeStairsBlock());
	public static final RegistryObject<Block> YELLOW_STAIRS = REGISTRY.register("yellow_stairs", () -> new YellowStairsBlock());
	public static final RegistryObject<Block> LIME_STAIRS = REGISTRY.register("lime_stairs", () -> new LimeStairsBlock());
	public static final RegistryObject<Block> GREEN_STAIRS = REGISTRY.register("green_stairs", () -> new GreenStairsBlock());
	public static final RegistryObject<Block> CYAN_STAIRS = REGISTRY.register("cyan_stairs", () -> new CyanStairsBlock());
	public static final RegistryObject<Block> LIGHT_BLUE_STAIRS = REGISTRY.register("light_blue_stairs", () -> new LightBlueStairsBlock());
	public static final RegistryObject<Block> BLUE_STAIRS = REGISTRY.register("blue_stairs", () -> new BlueStairsBlock());
	public static final RegistryObject<Block> PURPLE_STAIRS = REGISTRY.register("purple_stairs", () -> new PurpleStairsBlock());
	public static final RegistryObject<Block> MAGENTA_STAIRS = REGISTRY.register("magenta_stairs", () -> new MagentaStairsBlock());
	public static final RegistryObject<Block> PINK_STAIRS = REGISTRY.register("pink_stairs", () -> new PinkStairsBlock());
	public static final RegistryObject<Block> WHITE_SLAB = REGISTRY.register("white_slab", () -> new WhiteSlabBlock());
	public static final RegistryObject<Block> LIGHT_GRAY_SLAB = REGISTRY.register("light_gray_slab", () -> new LightGraySlabBlock());
	public static final RegistryObject<Block> GRAY_SLAB = REGISTRY.register("gray_slab", () -> new GraySlabBlock());
	public static final RegistryObject<Block> BLACK_SLAB = REGISTRY.register("black_slab", () -> new BlackSlabBlock());
	public static final RegistryObject<Block> BROWN_SLAB = REGISTRY.register("brown_slab", () -> new BrownSlabBlock());
	public static final RegistryObject<Block> RED_SLAB = REGISTRY.register("red_slab", () -> new RedSlabBlock());
	public static final RegistryObject<Block> ORANGE_SLAB = REGISTRY.register("orange_slab", () -> new OrangeSlabBlock());
	public static final RegistryObject<Block> YELLOW_SLAB = REGISTRY.register("yellow_slab", () -> new YellowSlabBlock());
	public static final RegistryObject<Block> LIME_SLAB = REGISTRY.register("lime_slab", () -> new LimeSlabBlock());
	public static final RegistryObject<Block> GREEN_SLAB = REGISTRY.register("green_slab", () -> new GreenSlabBlock());
	public static final RegistryObject<Block> CYAN_SLAB = REGISTRY.register("cyan_slab", () -> new CyanSlabBlock());
	public static final RegistryObject<Block> LIGHT_BLUE_SLAB = REGISTRY.register("light_blue_slab", () -> new LightBlueSlabBlock());
	public static final RegistryObject<Block> BLUE_SLAB = REGISTRY.register("blue_slab", () -> new BlueSlabBlock());
	public static final RegistryObject<Block> PURPLE_SLAB = REGISTRY.register("purple_slab", () -> new PurpleSlabBlock());
	public static final RegistryObject<Block> MAGENTA_SLAB = REGISTRY.register("magenta_slab", () -> new MagentaSlabBlock());
	public static final RegistryObject<Block> PINK_SLAB = REGISTRY.register("pink_slab", () -> new PinkSlabBlock());
	public static final RegistryObject<Block> WHITE_FENCE = REGISTRY.register("white_fence", () -> new WhiteFenceBlock());
	public static final RegistryObject<Block> LIGHT_GRAY_FENCE = REGISTRY.register("light_gray_fence", () -> new LightGrayFenceBlock());
	public static final RegistryObject<Block> GRAY_FENCE = REGISTRY.register("gray_fence", () -> new GrayFenceBlock());
	public static final RegistryObject<Block> BLACK_FENCE = REGISTRY.register("black_fence", () -> new BlackFenceBlock());
	public static final RegistryObject<Block> BROWN_FENCE = REGISTRY.register("brown_fence", () -> new BrownFenceBlock());
	public static final RegistryObject<Block> RED_FENCE = REGISTRY.register("red_fence", () -> new RedFenceBlock());
	public static final RegistryObject<Block> ORANGE_FENCE = REGISTRY.register("orange_fence", () -> new OrangeFenceBlock());
	public static final RegistryObject<Block> YELLOW_FENCE = REGISTRY.register("yellow_fence", () -> new YellowFenceBlock());
	public static final RegistryObject<Block> LIME_FENCE = REGISTRY.register("lime_fence", () -> new LimeFenceBlock());
	public static final RegistryObject<Block> GREEN_FENCE = REGISTRY.register("green_fence", () -> new GreenFenceBlock());
	public static final RegistryObject<Block> CYAN_FENCE = REGISTRY.register("cyan_fence", () -> new CyanFenceBlock());
	public static final RegistryObject<Block> LIGHT_BLUE_FENCE = REGISTRY.register("light_blue_fence", () -> new LightBlueFenceBlock());
	public static final RegistryObject<Block> BLUE_FENCE = REGISTRY.register("blue_fence", () -> new BlueFenceBlock());
	public static final RegistryObject<Block> PURPLE_FENCE = REGISTRY.register("purple_fence", () -> new PurpleFenceBlock());
	public static final RegistryObject<Block> MAGENTA_FENCE = REGISTRY.register("magenta_fence", () -> new MagentaFenceBlock());
	public static final RegistryObject<Block> PINK_FENCE = REGISTRY.register("pink_fence", () -> new PinkFenceBlock());
	public static final RegistryObject<Block> WHITE_FENCE_GATE = REGISTRY.register("white_fence_gate", () -> new WhiteFenceGateBlock());
	public static final RegistryObject<Block> LIGHT_GRAY_FENCE_GATE = REGISTRY.register("light_gray_fence_gate", () -> new LightGrayFenceGateBlock());
	public static final RegistryObject<Block> GRAY_FENCE_GATE = REGISTRY.register("gray_fence_gate", () -> new GrayFenceGateBlock());
	public static final RegistryObject<Block> BLACK_FENCE_GATE = REGISTRY.register("black_fence_gate", () -> new BlackFenceGateBlock());
	public static final RegistryObject<Block> BROWN_FENCE_GATE = REGISTRY.register("brown_fence_gate", () -> new BrownFenceGateBlock());
	public static final RegistryObject<Block> RED_FENCE_GATE = REGISTRY.register("red_fence_gate", () -> new RedFenceGateBlock());
	public static final RegistryObject<Block> ORANGE_FENCE_GATE = REGISTRY.register("orange_fence_gate", () -> new OrangeFenceGateBlock());
	public static final RegistryObject<Block> YELLOW_FENCE_GATE = REGISTRY.register("yellow_fence_gate", () -> new YellowFenceGateBlock());
	public static final RegistryObject<Block> LIME_FENCE_GATE = REGISTRY.register("lime_fence_gate", () -> new LimeFenceGateBlock());
	public static final RegistryObject<Block> GREEN_FENCE_GATE = REGISTRY.register("green_fence_gate", () -> new GreenFenceGateBlock());
	public static final RegistryObject<Block> CYAN_FENCE_GATE = REGISTRY.register("cyan_fence_gate", () -> new CyanFenceGateBlock());
	public static final RegistryObject<Block> LIGHT_BLUE_FENCE_GATE = REGISTRY.register("light_blue_fence_gate", () -> new LightBlueFenceGateBlock());
	public static final RegistryObject<Block> BLUE_FENCE_GATE = REGISTRY.register("blue_fence_gate", () -> new BlueFenceGateBlock());
	public static final RegistryObject<Block> PURPLE_FENCE_GATE = REGISTRY.register("purple_fence_gate", () -> new PurpleFenceGateBlock());
	public static final RegistryObject<Block> MAGENTA_FENCE_GATE = REGISTRY.register("magenta_fence_gate", () -> new MagentaFenceGateBlock());
	public static final RegistryObject<Block> PINK_FENCE_GATE = REGISTRY.register("pink_fence_gate", () -> new PinkFenceGateBlock());
	public static final RegistryObject<Block> WILDFLOWER = REGISTRY.register("wildflower", () -> new WildflowerBlock());
	public static final RegistryObject<Block> BURNING_BLOSSOM = REGISTRY.register("burning_blossom", () -> new BurningblossomBlock());
	public static final RegistryObject<Block> LAVANDER = REGISTRY.register("lavander", () -> new LavanderBlock());
	public static final RegistryObject<Block> DESERT_ROSE = REGISTRY.register("desert_rose", () -> new DesertRoseBlock());
	public static final RegistryObject<Block> BLUE_ROSE = REGISTRY.register("blue_rose", () -> new BlueRoseBlock());
	public static final RegistryObject<Block> SUNSHROOM = REGISTRY.register("sunshroom", () -> new SunshroomBlock());
	public static final RegistryObject<Block> MOONSHROOM = REGISTRY.register("moonshroom", () -> new MoonshroomBlock());
	public static final RegistryObject<Block> GRAPE_VINE_0 = REGISTRY.register("grape_vine_0", () -> new GrapeVine0Block());
	public static final RegistryObject<Block> CLAY_OVEN = REGISTRY.register("clay_oven", () -> new ClayOvenBlock());
	public static final RegistryObject<Block> SILVER_ORE = REGISTRY.register("silver_ore", () -> new SilverOreBlock());
	public static final RegistryObject<Block> DEEPSLATE_SILVER_ORE = REGISTRY.register("deepslate_silver_ore", () -> new DeepslateSilverOreBlock());
	public static final RegistryObject<Block> RAW_SILVER_BLOCK = REGISTRY.register("raw_silver_block", () -> new RawSilverBlockBlock());
	public static final RegistryObject<Block> SILVER_BLOCK = REGISTRY.register("silver_block", () -> new SilverBlockBlock());
	public static final RegistryObject<Block> SAPPHIRE_ORE = REGISTRY.register("sapphire_ore", () -> new SapphireOreBlock());
	public static final RegistryObject<Block> SAPPHIRE_BLOCK = REGISTRY.register("sapphire_block", () -> new SapphireBlockBlock());
	public static final RegistryObject<Block> DEEPSLATE_SAPPHIRE_ORE = REGISTRY.register("deepslate_sapphire_ore", () -> new DeepslateSapphireOreBlock());
	public static final RegistryObject<Block> DENSE_WEB = REGISTRY.register("dense_web", () -> new DenseWebBlock());
	public static final RegistryObject<Block> DENSE_WEB_WITH_SPIDER = REGISTRY.register("dense_web_with_spider", () -> new DenseWebWithSpiderBlock());
	public static final RegistryObject<Block> BLUEBERRY_BUSH_0 = REGISTRY.register("blueberry_bush_0", () -> new BlueberryBush0Block());
	public static final RegistryObject<Block> BLUEBERRY_BUSH_1 = REGISTRY.register("blueberry_bush_1", () -> new BlueberryBush1Block());
	public static final RegistryObject<Block> LETTUCE_STAGE_0 = REGISTRY.register("lettuce_stage_0", () -> new LettuceStage0Block());
	public static final RegistryObject<Block> LETTUCE_STAGE_1 = REGISTRY.register("lettuce_stage_1", () -> new LettuceStage1Block());
	public static final RegistryObject<Block> LETTUCE_STAGE_2 = REGISTRY.register("lettuce_stage_2", () -> new LettuceStage2Block());
	public static final RegistryObject<Block> LETTUCE_STAGE_3 = REGISTRY.register("lettuce_stage_3", () -> new LettuceStage3Block());
	public static final RegistryObject<Block> EUCALYPTUS_WOOD = REGISTRY.register("eucalyptus_wood", () -> new EucalyptusWoodBlock());
	public static final RegistryObject<Block> EUCALYPTUS_LOG = REGISTRY.register("eucalyptus_log", () -> new EucalyptusLogBlock());
	public static final RegistryObject<Block> EUCALYPTUS_PLANKS = REGISTRY.register("eucalyptus_planks", () -> new EucalyptusPlanksBlock());
	public static final RegistryObject<Block> EUCALYPTUS_LEAVES = REGISTRY.register("eucalyptus_leaves", () -> new EucalyptusLeavesBlock());
	public static final RegistryObject<Block> EUCALYPTUS_STAIRS = REGISTRY.register("eucalyptus_stairs", () -> new EucalyptusStairsBlock());
	public static final RegistryObject<Block> EUCALYPTUS_SLAB = REGISTRY.register("eucalyptus_slab", () -> new EucalyptusSlabBlock());
	public static final RegistryObject<Block> EUCALYPTUS_FENCE = REGISTRY.register("eucalyptus_fence", () -> new EucalyptusFenceBlock());
	public static final RegistryObject<Block> EUCALYPTUS_FENCE_GATE = REGISTRY.register("eucalyptus_fence_gate", () -> new EucalyptusFenceGateBlock());
	public static final RegistryObject<Block> EUCALYPTUS_PRESSURE_PLATE = REGISTRY.register("eucalyptus_pressure_plate", () -> new EucalyptusPressurePlateBlock());
	public static final RegistryObject<Block> EUCALYPTUS_BUTTON = REGISTRY.register("eucalyptus_button", () -> new EucalyptusButtonBlock());
	public static final RegistryObject<Block> STRIPPED_EUCALYPTUS_WOOD = REGISTRY.register("stripped_eucalyptus_wood", () -> new StrippedEucalyptusWoodBlock());
	public static final RegistryObject<Block> STRIPPED_EUCALYPTUS_LOG = REGISTRY.register("stripped_eucalyptus_log", () -> new StrippedEucalyptusLogBlock());
	public static final RegistryObject<Block> EUCALYPTUS_PARQUET = REGISTRY.register("eucalyptus_parquet", () -> new EucalyptusParquetBlock());
	public static final RegistryObject<Block> EUCALYPTUS_DOOR = REGISTRY.register("eucalyptus_door", () -> new EucalyptusDoorBlock());
	public static final RegistryObject<Block> EUCALYPTUS_TRAPDOOR = REGISTRY.register("eucalyptus_trapdoor", () -> new EucalyptusTrapdoorBlock());
	public static final RegistryObject<Block> EUCALYPTUS_SAPLING = REGISTRY.register("eucalyptus_sapling", () -> new EucalyptusSaplingBlock());
	public static final RegistryObject<Block> GRAPE_VINE_1 = REGISTRY.register("grape_vine_1", () -> new GrapeVine1Block());

	@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
	public static class ClientSideHandler {
		@SubscribeEvent
		public static void blockColorLoad(RegisterColorHandlersEvent.Block event) {
			EucalyptusLeavesBlock.blockColorLoad(event);
		}

		@SubscribeEvent
		public static void itemColorLoad(RegisterColorHandlersEvent.Item event) {
			EucalyptusLeavesBlock.itemColorLoad(event);
		}
	}
}
